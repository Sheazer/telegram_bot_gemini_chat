import google.generativeai as genai
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import GEMINI_API_KEY

router = Router()
user_modes = {}

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-pro-exp")

# keyboard = ReplyKeyboardMarkup(
#     keyboard=[
#         [KeyboardButton(text="üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç"), KeyboardButton(text="üé≠ –§–∏–ª–æ—Å–æ—Ñ")],
#         [KeyboardButton(text="üòÇ –Æ–º–æ—Ä–∏—Å—Ç"), KeyboardButton(text="üïµÔ∏è‚Äç‚ôÇÔ∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç")],
#         [KeyboardButton(text="üîÆ –ì–∞–¥–∞–ª–∫–∞")]
#     ],
#     resize_keyboard=True
# )

MODE_PROMPTS = {
    "–û–±—ã—á–Ω—ã–π —á–∞—Ç": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
    "–§–∏–ª–æ—Å–æ—Ñ": "–¢—ã —Ñ–∏–ª–æ—Å–æ—Ñ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –≥–ª—É–±–æ–∫–æ–º—ã—Å–ª–µ–Ω–Ω–æ.",
    "–Æ–º–æ—Ä–∏—Å—Ç": "–¢—ã –∫–æ–º–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —Å —é–º–æ—Ä–æ–º.",
    "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç": "–¢—ã —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞–≥–∞–¥–æ—á–Ω–æ.",
    "–ì–∞–¥–∞–ª–∫–∞": "–¢—ã –º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∞–¥–∞–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–¥—É—â–µ–µ."
}
#
# @router.message(Command("chat"))
# async def start_chat_mode(message: types.Message):
#     user_modes[message.from_user.id] = "–û–±—ã—á–Ω—ã–π —á–∞—Ç"
#     await message.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)

@router.message(lambda msg: msg.text in MODE_PROMPTS)
async def change_mode(message: types.Message):
    user_modes[message.from_user.id] = message.text
    await message.answer(f"–¢–µ–ø–µ—Ä—å —è –æ—Ç–≤–µ—á–∞—é –≤ —Å—Ç–∏–ª–µ: {message.text}", parse_mode="Markdown")

@router.message()
async def chat_with_gemini(message: types.Message):
    user_mode = user_modes.get(message.from_user.id, "–û–±—ã—á–Ω—ã–π —á–∞—Ç")
    prompt = MODE_PROMPTS[user_mode]
    response = model.generate_content(f"{prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}")
    bot_response = response.text if response.text else "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI."
    await message.reply(bot_response)
